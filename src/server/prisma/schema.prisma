generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  enabled   Boolean  @default(false)
  isAdmin   Boolean  @default(false)

  serverFolderDenyPermissions ServerFolderDenyPermission[]
  tasks                       Task[]
  artistFavorites             ArtistFavorites[]
  albumArtistFavorites        AlbumArtistFavorites[]
  albumFavorites              AlbumFavorites[]
  songFavorites               SongFavorites[]
  artistRatings               ArtistRatings[]
  albumArtistRatings          AlbumArtistRatings[]
  albumRatings                AlbumRatings[]
  songRatings                 SongRatings[]
}

model Server {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  url        String   @unique
  username   String
  token      String
  serverType String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  serverFolder ServerFolder[]
}

model ServerFolder {
  id        Int      @id @default(autoincrement())
  name      String
  remoteId  String   @unique
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  albumArtists                AlbumArtist[]
  artists                     Artist[]
  songs                       Song[]
  albums                      Album[]
  serverFolderDenyPermissions ServerFolderDenyPermission[]

  Server   Server @relation(fields: [serverId], references: [id])
  serverId Int

  @@unique(fields: [serverId, remoteId], name: "uniqueServerFolderId")
}

model ServerFolderDenyPermission {
  id Int @id @default(autoincrement())

  ServerFolder   ServerFolder @relation(fields: [serverFolderId], references: [id])
  serverFolderId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model Genre {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  artists      GenresOnArtists[]
  albumArtists GenresOnAlbumArtists[]
  albums       GenresOnAlbums[]
  songs        GenresOnSongs[]
}

model GenresOnArtists {
  Artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int

  Genre     Genre  @relation(fields: [genreName], references: [name])
  genreName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([genreName, artistId])
}

model GenresOnAlbumArtists {
  AlbumArtist   AlbumArtist @relation(fields: [albumArtistId], references: [id])
  albumArtistId Int

  Genre     Genre  @relation(fields: [genreName], references: [name])
  genreName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([genreName, albumArtistId])
}

model GenresOnAlbums {
  Album   Album @relation(fields: [albumId], references: [id])
  albumId Int

  Genre     Genre  @relation(fields: [genreName], references: [name])
  genreName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([genreName, albumId])
}

model GenresOnSongs {
  Song   Song @relation(fields: [songId], references: [id])
  songId Int

  Genre     Genre  @relation(fields: [genreName], references: [name])
  genreName String

  @@id([genreName, songId])
}

model ArtistFavorites {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model AlbumArtistFavorites {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AlbumArtist   AlbumArtist @relation(fields: [albumArtistId], references: [id])
  albumArtistId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int

}

model AlbumFavorites {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Album   Album @relation(fields: [albumId], references: [id])
  albumId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model SongFavorites {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Song   Song @relation(fields: [songId], references: [id])
  songId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model ArtistRatings {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model AlbumArtistRatings {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AlbumArtist   AlbumArtist @relation(fields: [albumArtistId], references: [id])
  albumArtistId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model AlbumRatings {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Album   Album @relation(fields: [albumId], references: [id])
  albumId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model SongRatings {
  id        Int      @id @default(autoincrement())
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Song   Song @relation(fields: [songId], references: [id])
  songId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model AlbumArtist {
  id              Int       @id @default(autoincrement())
  name            String
  imageUrl        String?
  biography       String?
  remoteId        String
  remoteCreatedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  albums               Album[]
  genresOnAlbumArtists GenresOnAlbumArtists[]
  albumArtistFavorites AlbumArtistFavorites[]
  albumArtistRatings   AlbumArtistRatings[]

  ServerFolder   ServerFolder @relation(fields: [serverFolderId], references: [id])
  serverFolderId Int

  @@unique(fields: [serverFolderId, remoteId], name: "uniqueAlbumArtistId")
}

model Album {
  id              Int       @id @default(autoincrement())
  name            String
  imageUrl        String?
  year            Int?
  remoteId        String
  remoteCreatedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  songs          Song[]
  genresOnAlbums GenresOnAlbums[]
  albumFavorites AlbumFavorites[]
  albumRatings   AlbumRatings[]

  ServerFolder   ServerFolder @relation(fields: [serverFolderId], references: [id])
  serverFolderId Int

  AlbumArtist   AlbumArtist @relation(fields: [albumArtistId], references: [id])
  albumArtistId Int

  @@unique(fields: [serverFolderId, remoteId], name: "uniqueAlbumId")
}

model Artist {
  id              Int       @id @default(autoincrement())
  name            String
  imageUrl        String?
  biography       String?
  remoteId        String?
  remoteCreatedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  songs           Song[]
  genres          GenresOnArtists[]
  artistFavorites ArtistFavorites[]
  artistsRatings  ArtistRatings[]


  ServerFolder   ServerFolder @relation(fields: [serverFolderId], references: [id])
  serverFolderId Int

  @@unique(fields: [serverFolderId, remoteId], name: "uniqueArtistId")
}

model Song {
  id              Int       @id @default(autoincrement())
  name            String
  artistName      String
  imageUrl        String?
  remoteId        String
  remoteCreatedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  genresOnSongs GenresOnSongs[]
  songFavorites SongFavorites[]
  songRatings   SongRatings[]

  Album   Album @relation(fields: [albumId], references: [id])
  albumId Int

  Artist   Artist? @relation(fields: [artistId], references: [id])
  artistId Int?

  ServerFolder   ServerFolder @relation(fields: [serverFolderId], references: [id])
  serverFolderId Int

  @@unique(fields: [serverFolderId, remoteId], name: "uniqueSongId")
}

model Task {
  id         Int      @id @default(autoincrement())
  name       String
  inProgress Boolean
  completed  Boolean  @default(false)
  isError    Boolean? @default(false)
  message    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  User   User @relation(fields: [userId], references: [id])
  userId Int
}
