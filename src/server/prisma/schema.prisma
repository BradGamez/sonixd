generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  enabled   Boolean  @default(false)
  isAdmin   Boolean  @default(false)

  servers              Server[]
  tasks                Task[]
  favoriteArtists      FavoriteArtists[]
  favoriteAlbumArtists FavoriteAlbumArtists[]
  favoriteAlbums       FavoriteAlbums[]
  favoriteSongs        FavoriteSongs[]
  ratingArtists        RatingArtists[]
  ratingAlbumArtists   RatingAlbumArtists[]
  ratingAlbums         RatingAlbums[]
  ratingSongs          RatingSongs[]
}

model Server {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  url          String   @unique
  alternateUrl String
  username     String
  token        String
  serverType   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  artists      Artist[]
  albumArtists AlbumArtist[]
  albums       Album[]
  songs        Song[]

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model Genre {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  artists      GenresOnArtists[]
  albumArtists GenresOnAlbumArtists[]
  albums       GenresOnAlbums[]
  songs        GenresOnSongs[]
}

model GenresOnArtists {
  Genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int

  Artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([genreId, artistId])
}

model GenresOnAlbumArtists {
  Genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int

  AlbumArtist   AlbumArtist @relation(fields: [albumArtistId], references: [id])
  albumArtistId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([genreId, albumArtistId])
}

model GenresOnAlbums {
  Album   Album @relation(fields: [albumId], references: [id])
  albumId Int

  Genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([genreId, albumId])
}

model GenresOnSongs {
  Song   Song @relation(fields: [songId], references: [id])
  songId Int

  Genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int

  @@id([genreId, songId])
}

model FavoriteArtists {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model FavoriteAlbumArtists {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AlbumArtist   AlbumArtist @relation(fields: [albumArtistId], references: [id])
  albumArtistId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int

}

model FavoriteAlbums {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Album   Album @relation(fields: [albumId], references: [id])
  albumId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model FavoriteSongs {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Song   Song @relation(fields: [songId], references: [id])
  songId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model RatingArtists {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model RatingAlbumArtists {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AlbumArtist   AlbumArtist @relation(fields: [albumArtistId], references: [id])
  albumArtistId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model RatingAlbums {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Album   Album @relation(fields: [albumId], references: [id])
  albumId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model RatingSongs {
  id        Int      @id @default(autoincrement())
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Song   Song @relation(fields: [songId], references: [id])
  songId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model AlbumArtist {
  id              Int       @id @default(autoincrement())
  name            String
  imageUrl        String?
  biography       String?
  remoteId        String
  remoteCreatedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  albums                 Album[]
  GenresOnAlbumArtists   GenresOnAlbumArtists[]
  favoriteAlbumArtistsId FavoriteAlbumArtists[]

  Server   Server @relation(fields: [serverId], references: [id])
  serverId Int

  RatingAlbumArtists RatingAlbumArtists[]
  @@unique(fields: [serverId, remoteId], name: "uniqueAlbumArtistId")
}

model Album {
  id              Int       @id @default(autoincrement())
  name            String
  imageUrl        String?
  year            Int?
  remoteId        String
  remoteCreatedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  songs          Song[]
  genres         GenresOnAlbums[]
  FavoriteAlbums FavoriteAlbums[]
  RatingAlbums   RatingAlbums[]

  Server   Server @relation(fields: [serverId], references: [id])
  serverId Int

  AlbumArtist   AlbumArtist @relation(fields: [albumArtistId], references: [id])
  albumArtistId Int

  @@unique(fields: [serverId, remoteId], name: "uniqueAlbumId")
}

model Artist {
  id              Int       @id @default(autoincrement())
  name            String
  imageUrl        String?
  biography       String?
  remoteId        String
  remoteCreatedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  songs           Song[]
  genres          GenresOnArtists[]
  favoriteArtists FavoriteArtists[]
  ratingArtists   RatingArtists[]

  Server   Server @relation(fields: [serverId], references: [id])
  serverId Int

  @@unique(fields: [serverId, remoteId], name: "uniqueArtistId")
}

model Song {
  id              Int       @id @default(autoincrement())
  name            String
  imageUrl        String?
  remoteId        String
  remoteCreatedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  genres        GenresOnSongs[]
  FavoriteSongs FavoriteSongs[]
  RatingSongs   RatingSongs[]

  Album   Album @relation(fields: [albumId], references: [id])
  albumId Int

  Server   Server @relation(fields: [serverId], references: [id])
  serverId Int

  Artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int

  @@unique(fields: [serverId, remoteId], name: "uniqueSongId")
}

model Task {
  id         Int      @id @default(autoincrement())
  name       String
  inProgress Boolean
  completed  Boolean
  message    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  User   User @relation(fields: [userId], references: [id])
  userId Int
}
